# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
# - wasm: check wasm target
# - semver: check API changes for semver violations
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches: [master, main]
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:
  vars:
    runs-on: ubuntu-latest
    # https://rust-lang.github.io/rustup-components-history/
    outputs:
      nightly: nightly-2025-10-21
      stable: 1.90.0
      msrv: ${{ steps.variables.outputs.msrv }}
    steps:
      - uses: actions/checkout@v4
      - id: variables
        run: |
          pip install toml-cli==0.8.2
          msrv=$(toml get --toml-path=Cargo.toml package.rust-version)
          echo "msrv=${msrv}"
          echo "msrv=${msrv}" >> "$GITHUB_OUTPUT"
  fmt:
    needs: vars
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ["${{ needs.vars.outputs.stable }}"]
    name: ${{ matrix.toolchain }} / fmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check
  clippy:
    needs: vars
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["${{ needs.vars.outputs.nightly }}"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        run: cargo clippy --all-targets --all-features
        env:
          RUSTFLAGS: -Dwarnings
  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    needs: vars
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ["${{ needs.vars.outputs.nightly }}"]
    name: ${{ matrix.toolchain }} / doc
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo doc
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings --cfg docsrs
  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive
    # which is required for feature unification
    needs: vars
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ["${{ needs.vars.outputs.stable }}"]
    name: ubuntu / ${{ matrix.toolchain }} / features
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack
        run: cargo hack --feature-powerset check
  msrv:
    needs: vars
    runs-on: ubuntu-latest
    strategy:
      matrix:
        msrv: ["${{ needs.vars.outputs.msrv }}"]
    name: ubuntu / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ needs.vars.outputs.nightly }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.vars.outputs.nightly }}
      # Generate Cargo.lock with minimal versions
      - name: Update dependencies to minimal versions
        run: cargo +nightly update -Zdirect-minimal-versions
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - run: cargo +${{ matrix.msrv }} check --locked
        env:
          RUSTFLAGS: -D warnings
  wasm:
    needs: vars
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.vars.outputs.stable }}
          targets: wasm32-unknown-unknown
      - name: cargo check
        run: cargo check --target wasm32-unknown-unknown
        env:
          RUSTFLAGS: -D warnings
  semver:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
